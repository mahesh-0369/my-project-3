
@class GKFriendRequestInternal, GKChallengeInternal, GKAuthenticateResponse, GKScoreInternal, GKGameSession, GKGameInternal, GKAchievementInternal, GKCloudPlayer;

@protocol GKClientProtocol <NSObject>
@required
-(oneway void)receivedChallengeSelected:(GKChallengeInternal *)arg1;
-(oneway void)completedOptimisticAuthenticationWithResponse:(GKAuthenticateResponse *)arg1 error:(NSError *)arg2;
-(oneway void)resetNetworkActivity;
-(oneway void)scoreSelected:(GKScoreInternal *)arg1;
-(oneway void)acceptMultiplayerGameInvite;
-(oneway void)session:(GKGameSession *)arg1 addedPlayer:(GKCloudPlayer *)arg2;
-(oneway void)acceptInviteWithNotification:(id)arg1;
-(oneway void)session:(GKGameSession *)arg1 didReceiveMessage:(NSString *)arg2 withData:(NSData *)arg3 fromPlayer:(GKCloudPlayer *)arg4;
-(oneway void)setLogBits:(int)arg1;
-(oneway void)cancelGameInvite:(NSString *)arg1;
-(oneway void)requestSandboxExtension:(void (^)(NSString *))arg1;
-(oneway void)beginNetworkActivity;
-(oneway void)completedChallengeSelected:(GKChallengeInternal *)arg1;
-(oneway void)didReceiveData:(NSData *)arg1 reliably:(BOOL)arg2 forRecipients:(id)arg3 fromSender:(NSString *)arg4;
-(oneway void)session:(GKGameSession *)arg1 player:(GKCloudPlayer *)arg2 didSaveData:(NSData *)arg3;
-(oneway void)localPlayerAcceptedCustomTournamentInvite;
-(oneway void)refreshContentsForDataType:(unsigned)arg1 userInfo:(id)arg2;
-(oneway void)session:(GKGameSession *)arg1 player:(GKCloudPlayer *)arg2 didChangeConnectionState:(long long)arg3;
-(oneway void)session:(GKGameSession *)arg1 didReceiveData:(NSData *)arg2 fromPlayer:(GKCloudPlayer *)arg3;
-(oneway void)challengeReceived:(GKChallengeInternal *)arg1;
-(oneway void)session:(GKGameSession *)arg1 removedPlayer:(GKCloudPlayer *)arg2;
-(oneway void)didDisconnectFromParticipantWithID:(NSString *)arg1;
-(oneway void)didConnectToParticipantWithID:(NSString *)arg1;
-(oneway void)declineInviteWithNotification:(id)arg1;
-(oneway void)respondedToNearbyInvite:(id)arg1;
-(oneway void)setBadgeCount:(unsigned long long)arg1 forType:(unsigned long long)arg2;
-(oneway void)setPreferencesValues:(id)arg1;
//-(oneway void)friendRequestSelected:(GKFriendRequestInternal *)arg1;
-(oneway void)relayPushNotification:(id)arg1;
-(oneway void)setCurrentGame:(GKGameInternal *)arg1 serverEnvironment:(long long)arg2 reply:(void (^)())arg3;
-(oneway void)endNetworkActivity;
-(oneway void)challengeCompleted:(GKChallengeInternal *)arg1;
-(oneway void)achievementSelected:(GKAchievementInternal *)arg1;
-(oneway void)fetchTurnBasedData;
-(oneway void)authenticatedPlayersDidChange:(id)arg1 reply:(void (^)())arg2;

@end

